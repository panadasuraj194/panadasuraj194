Streams-powered Node.js APIs

Due to their advantages, many Node.js core modules provide native stream handling capabilities, most notably:

    process.stdin: returns a stream connected to stdin
    process.stdout: returns a stream connected to stdout
    process.stderr: returns a stream connected to stderr
    fs.createReadStream(): creates a readable stream to a file
    fs.createWriteStream(): creates a writable stream to a file
    net.connect(): initiates a stream-based connection
    http.request(): returns an instance of the http.ClientRequest class, which is a writable stream
    zlib.createGzip(): compress data using gzip (a compression algorithm) into a stream
    zlib.createGunzip(): decompress a gzip stream.
    zlib.createDeflate(): compress data using deflate (a compression algorithm) into a stream
    zlib.createInflate(): decompress a deflate stream
 
 ----------------------------------------------------------------------------------------------------------------
 
 Different types of streams

There are four classes of streams:

    Readable: a stream you can pipe from, but not pipe into (you can receive data, but not send data to it). When you push data into a readable stream, it is buffered, until a consumer starts to read the data.
    
    Writable: a stream you can pipe into, but not pipe from (you can send data, but not receive from it)
    
    Duplex: a stream you can both pipe into and pipe from, basically a combination of a Readable and Writable stream
    
    Transform: a Transform stream is similar to a Duplex, but the output is a transform of its input
---------------------------------------------------------------------------------------------------------------------


